{"docstore/ref_doc_info": {"a9e4756f-9d36-4e56-b4f6-7c932f7fc37d": {"node_ids": ["7eaadae4-5460-467c-b70c-4a733bbad058"], "metadata": {"python_code": "import subprocess\nimport time\nimport pygetwindow as gw\nimport pyperclip\nimport pyautogui\n\n# Best Practice: Always check for an existing window first.\nnotepad_windows = gw.getWindowsWithTitle('\u30e1\u30e2\u5e33')\n\nif notepad_windows:\n    window = notepad_windows[0]\n    window.activate()\n    time.sleep(1)\nelse:\n    subprocess.Popen(['notepad.exe'])\n    time.sleep(2)\n    window = gw.getWindowsWithTitle('\u30e1\u30e2\u5e33')[0]\n    window.activate()\n    time.sleep(1)\n\n# Best Practice: Use clipboard for non-ASCII characters.\npyperclip.copy('\u732b')\npyautogui.hotkey('ctrl', 'v')\n", "original_prompt": "\u30e1\u30e2\u5e33\u3092\u958b\u3044\u3066\"\u732b\"\u3068\u5165\u529b"}}, "b5e3f0f8-613f-45e1-822e-4f9b8b72596d": {"node_ids": ["b9b8fa3a-0a51-42e0-9641-5a9fcfeadc23"], "metadata": {"python_code": "import asyncio\nimport nest_asyncio\nfrom playwright.async_api import async_playwright\n\nnest_asyncio.apply()\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.launch(headless=False)\n        page = await browser.new_page()\n        await page.goto(\"https://www.google.com\")\n        # Best practice: Use the dynamically verified, most reliable selector for Google.\n        search_box = page.locator('textarea[name=\"q\"]')\n        await search_box.fill(\"\u72ac\")\n        await search_box.press(\"Enter\")\n        await page.wait_for_load_state('networkidle')\n        # Best practice: Keep the browser open for verification.\n        await asyncio.Future()\n\nasyncio.run(main())\n", "original_prompt": "\u30d6\u30e9\u30a6\u30b6\u3092\u958b\u3044\u3066\"\u72ac\"\u3092\u691c\u7d22"}}, "e1ae1907-76f0-45f3-b3a3-5ef757af81b0": {"node_ids": ["e5e92764-2769-4aeb-8899-246126bdbf72"], "metadata": {"python_code": "import subprocess\nimport time\nimport pygetwindow as gw\nimport pyperclip\nimport pyautogui\n\n# Best Practice: Always check for an existing window first.\ncalc_windows = gw.getWindowsWithTitle('Calculator')\n\nif calc_windows:\n    window = calc_windows[0]\n    window.activate()\n    time.sleep(1)\nelse:\n    subprocess.Popen(['calc.exe'])\n    time.sleep(2)\n    window = gw.getWindowsWithTitle('Calculator')[0]\n    window.activate()\n    time.sleep(1)\n\n# Best Practice: Use clipboard for complex input like calculations.\npyperclip.copy('123+456')\npyautogui.hotkey('ctrl', 'v')\npyautogui.press('enter')\n", "original_prompt": "\u96fb\u5353\u3092\u8d77\u52d5\u3057\u3066123+456\u3092\u8a08\u7b97"}}, "637f50e6-6bbe-4def-ab1e-e0f62cedd1f3": {"node_ids": ["97fa42ea-4c3a-4830-b7ba-214461c8bd30"], "metadata": {"python_code": "import asyncio\nimport nest_asyncio\nfrom playwright.async_api import async_playwright\n\nnest_asyncio.apply()\n\nasync def main():\n    async with async_playwright() as p:\n        # Best Practice: Connect to an existing browser instance using the provided CDP URL.\n        browser = await p.chromium.connect_over_cdp(\"http://localhost:9222\")\n        context = browser.contexts[0]\n        page = context.pages[0]\n        \n        await page.goto(\"https://www.yahoo.co.jp\")\n        \n        # Best practice: Keep the browser open for verification.\n        await asyncio.Future()\n\nasyncio.run(main())\n", "original_prompt": "\u65e2\u5b58\u306e\u30d6\u30e9\u30a6\u30b6\u306b\u63a5\u7d9a\u3057\u3066\u3001yahoo.co.jp\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304f\u3060\u3055\u3044"}}}, "docstore/data": {"7eaadae4-5460-467c-b70c-4a733bbad058": {"__data__": {"id_": "7eaadae4-5460-467c-b70c-4a733bbad058", "embedding": null, "metadata": {"python_code": "import subprocess\nimport time\nimport pygetwindow as gw\nimport pyperclip\nimport pyautogui\n\n# Best Practice: Always check for an existing window first.\nnotepad_windows = gw.getWindowsWithTitle('\u30e1\u30e2\u5e33')\n\nif notepad_windows:\n    window = notepad_windows[0]\n    window.activate()\n    time.sleep(1)\nelse:\n    subprocess.Popen(['notepad.exe'])\n    time.sleep(2)\n    window = gw.getWindowsWithTitle('\u30e1\u30e2\u5e33')[0]\n    window.activate()\n    time.sleep(1)\n\n# Best Practice: Use clipboard for non-ASCII characters.\npyperclip.copy('\u732b')\npyautogui.hotkey('ctrl', 'v')\n", "original_prompt": "\u30e1\u30e2\u5e33\u3092\u958b\u3044\u3066\"\u732b\"\u3068\u5165\u529b"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9e4756f-9d36-4e56-b4f6-7c932f7fc37d", "node_type": "4", "metadata": {"python_code": "import subprocess\nimport time\nimport pygetwindow as gw\nimport pyperclip\nimport pyautogui\n\n# Best Practice: Always check for an existing window first.\nnotepad_windows = gw.getWindowsWithTitle('\u30e1\u30e2\u5e33')\n\nif notepad_windows:\n    window = notepad_windows[0]\n    window.activate()\n    time.sleep(1)\nelse:\n    subprocess.Popen(['notepad.exe'])\n    time.sleep(2)\n    window = gw.getWindowsWithTitle('\u30e1\u30e2\u5e33')[0]\n    window.activate()\n    time.sleep(1)\n\n# Best Practice: Use clipboard for non-ASCII characters.\npyperclip.copy('\u732b')\npyautogui.hotkey('ctrl', 'v')\n", "original_prompt": "\u30e1\u30e2\u5e33\u3092\u958b\u3044\u3066\"\u732b\"\u3068\u5165\u529b"}, "hash": "454ef5c4b701281af69dfe2069ca33aab3246e6eefed78f66e40e80a9f260e35", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\u30e1\u30e2\u5e33\u3092\u958b\u3044\u3066\"\u732b\"\u3068\u5165\u529b", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 13, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b9b8fa3a-0a51-42e0-9641-5a9fcfeadc23": {"__data__": {"id_": "b9b8fa3a-0a51-42e0-9641-5a9fcfeadc23", "embedding": null, "metadata": {"python_code": "import asyncio\nimport nest_asyncio\nfrom playwright.async_api import async_playwright\n\nnest_asyncio.apply()\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.launch(headless=False)\n        page = await browser.new_page()\n        await page.goto(\"https://www.google.com\")\n        # Best practice: Use the dynamically verified, most reliable selector for Google.\n        search_box = page.locator('textarea[name=\"q\"]')\n        await search_box.fill(\"\u72ac\")\n        await search_box.press(\"Enter\")\n        await page.wait_for_load_state('networkidle')\n        # Best practice: Keep the browser open for verification.\n        await asyncio.Future()\n\nasyncio.run(main())\n", "original_prompt": "\u30d6\u30e9\u30a6\u30b6\u3092\u958b\u3044\u3066\"\u72ac\"\u3092\u691c\u7d22"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b5e3f0f8-613f-45e1-822e-4f9b8b72596d", "node_type": "4", "metadata": {"python_code": "import asyncio\nimport nest_asyncio\nfrom playwright.async_api import async_playwright\n\nnest_asyncio.apply()\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.launch(headless=False)\n        page = await browser.new_page()\n        await page.goto(\"https://www.google.com\")\n        # Best practice: Use the dynamically verified, most reliable selector for Google.\n        search_box = page.locator('textarea[name=\"q\"]')\n        await search_box.fill(\"\u72ac\")\n        await search_box.press(\"Enter\")\n        await page.wait_for_load_state('networkidle')\n        # Best practice: Keep the browser open for verification.\n        await asyncio.Future()\n\nasyncio.run(main())\n", "original_prompt": "\u30d6\u30e9\u30a6\u30b6\u3092\u958b\u3044\u3066\"\u72ac\"\u3092\u691c\u7d22"}, "hash": "c4f1ceb8bfc14f84f736b266e1c97d6a7302dbf995fb1f15cf35397eb5b878fc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\u30d6\u30e9\u30a6\u30b6\u3092\u958b\u3044\u3066\"\u72ac\"\u3092\u691c\u7d22", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 14, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e5e92764-2769-4aeb-8899-246126bdbf72": {"__data__": {"id_": "e5e92764-2769-4aeb-8899-246126bdbf72", "embedding": null, "metadata": {"python_code": "import subprocess\nimport time\nimport pygetwindow as gw\nimport pyperclip\nimport pyautogui\n\n# Best Practice: Always check for an existing window first.\ncalc_windows = gw.getWindowsWithTitle('Calculator')\n\nif calc_windows:\n    window = calc_windows[0]\n    window.activate()\n    time.sleep(1)\nelse:\n    subprocess.Popen(['calc.exe'])\n    time.sleep(2)\n    window = gw.getWindowsWithTitle('Calculator')[0]\n    window.activate()\n    time.sleep(1)\n\n# Best Practice: Use clipboard for complex input like calculations.\npyperclip.copy('123+456')\npyautogui.hotkey('ctrl', 'v')\npyautogui.press('enter')\n", "original_prompt": "\u96fb\u5353\u3092\u8d77\u52d5\u3057\u3066123+456\u3092\u8a08\u7b97"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e1ae1907-76f0-45f3-b3a3-5ef757af81b0", "node_type": "4", "metadata": {"python_code": "import subprocess\nimport time\nimport pygetwindow as gw\nimport pyperclip\nimport pyautogui\n\n# Best Practice: Always check for an existing window first.\ncalc_windows = gw.getWindowsWithTitle('Calculator')\n\nif calc_windows:\n    window = calc_windows[0]\n    window.activate()\n    time.sleep(1)\nelse:\n    subprocess.Popen(['calc.exe'])\n    time.sleep(2)\n    window = gw.getWindowsWithTitle('Calculator')[0]\n    window.activate()\n    time.sleep(1)\n\n# Best Practice: Use clipboard for complex input like calculations.\npyperclip.copy('123+456')\npyautogui.hotkey('ctrl', 'v')\npyautogui.press('enter')\n", "original_prompt": "\u96fb\u5353\u3092\u8d77\u52d5\u3057\u3066123+456\u3092\u8a08\u7b97"}, "hash": "943fc60776d8ff237409d6b87e9f36bf10c4347233ae8d76ee62820151c628ee", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\u96fb\u5353\u3092\u8d77\u52d5\u3057\u3066123+456\u3092\u8a08\u7b97", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 17, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "97fa42ea-4c3a-4830-b7ba-214461c8bd30": {"__data__": {"id_": "97fa42ea-4c3a-4830-b7ba-214461c8bd30", "embedding": null, "metadata": {"python_code": "import asyncio\nimport nest_asyncio\nfrom playwright.async_api import async_playwright\n\nnest_asyncio.apply()\n\nasync def main():\n    async with async_playwright() as p:\n        # Best Practice: Connect to an existing browser instance using the provided CDP URL.\n        browser = await p.chromium.connect_over_cdp(\"http://localhost:9222\")\n        context = browser.contexts[0]\n        page = context.pages[0]\n        \n        await page.goto(\"https://www.yahoo.co.jp\")\n        \n        # Best practice: Keep the browser open for verification.\n        await asyncio.Future()\n\nasyncio.run(main())\n", "original_prompt": "\u65e2\u5b58\u306e\u30d6\u30e9\u30a6\u30b6\u306b\u63a5\u7d9a\u3057\u3066\u3001yahoo.co.jp\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304f\u3060\u3055\u3044"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "637f50e6-6bbe-4def-ab1e-e0f62cedd1f3", "node_type": "4", "metadata": {"python_code": "import asyncio\nimport nest_asyncio\nfrom playwright.async_api import async_playwright\n\nnest_asyncio.apply()\n\nasync def main():\n    async with async_playwright() as p:\n        # Best Practice: Connect to an existing browser instance using the provided CDP URL.\n        browser = await p.chromium.connect_over_cdp(\"http://localhost:9222\")\n        context = browser.contexts[0]\n        page = context.pages[0]\n        \n        await page.goto(\"https://www.yahoo.co.jp\")\n        \n        # Best practice: Keep the browser open for verification.\n        await asyncio.Future()\n\nasyncio.run(main())\n", "original_prompt": "\u65e2\u5b58\u306e\u30d6\u30e9\u30a6\u30b6\u306b\u63a5\u7d9a\u3057\u3066\u3001yahoo.co.jp\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304f\u3060\u3055\u3044"}, "hash": "16ceb3a4104d96749d53710a578e183d859b25763d169b2f6816df36ca4abbc3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Connect to an existing browser and navigate to a URL", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 52, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"7eaadae4-5460-467c-b70c-4a733bbad058": {"doc_hash": "26156a60c489a1487f31c6a97fb0bdbab587da34838817768c1188437a66b8c5", "ref_doc_id": "a9e4756f-9d36-4e56-b4f6-7c932f7fc37d"}, "a9e4756f-9d36-4e56-b4f6-7c932f7fc37d": {"doc_hash": "454ef5c4b701281af69dfe2069ca33aab3246e6eefed78f66e40e80a9f260e35"}, "b9b8fa3a-0a51-42e0-9641-5a9fcfeadc23": {"doc_hash": "3cc6baa8ff6b13e89de18b5f63e78ecbd61a5561c690bc587a274d6c478db4d9", "ref_doc_id": "b5e3f0f8-613f-45e1-822e-4f9b8b72596d"}, "b5e3f0f8-613f-45e1-822e-4f9b8b72596d": {"doc_hash": "c4f1ceb8bfc14f84f736b266e1c97d6a7302dbf995fb1f15cf35397eb5b878fc"}, "e5e92764-2769-4aeb-8899-246126bdbf72": {"doc_hash": "4d1f9a3aff5ee50ed65d2ded86b6fd2096543ea527f758b38aadfead4fabbc0a", "ref_doc_id": "e1ae1907-76f0-45f3-b3a3-5ef757af81b0"}, "e1ae1907-76f0-45f3-b3a3-5ef757af81b0": {"doc_hash": "943fc60776d8ff237409d6b87e9f36bf10c4347233ae8d76ee62820151c628ee"}, "97fa42ea-4c3a-4830-b7ba-214461c8bd30": {"doc_hash": "a84aad5601be5160ba92489a8b6cbaad4a586879405ba387d2b32bf14ed8f579", "ref_doc_id": "637f50e6-6bbe-4def-ab1e-e0f62cedd1f3"}, "637f50e6-6bbe-4def-ab1e-e0f62cedd1f3": {"doc_hash": "16ceb3a4104d96749d53710a578e183d859b25763d169b2f6816df36ca4abbc3"}}}