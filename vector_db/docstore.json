{"docstore/ref_doc_info": {"bf1f0534-c868-4d8b-bca3-6ae23d8004f7": {"node_ids": ["0d110b6c-3530-4a48-857d-b358938889e0"], "metadata": {"python_code": "import subprocess\nimport time\nimport pygetwindow as gw\nimport pyperclip\nimport pyautogui\n\n# Best Practice: Always check for an existing window first.\nnotepad_windows = gw.getWindowsWithTitle('\u30e1\u30e2\u5e33')\n\nif notepad_windows:\n    window = notepad_windows[0]\n    window.activate()\n    time.sleep(1)\nelse:\n    subprocess.Popen(['notepad.exe'])\n    time.sleep(2)\n    window = gw.getWindowsWithTitle('\u30e1\u30e2\u5e33')[0]\n    window.activate()\n    time.sleep(1)\n\n# Best Practice: Use clipboard for non-ASCII characters.\npyperclip.copy('\u732b')\npyautogui.hotkey('ctrl', 'v')\n", "original_prompt": "\u30e1\u30e2\u5e33\u3092\u958b\u3044\u3066\"\u732b\"\u3068\u5165\u529b"}}, "9ad117f5-cd4e-4a47-9fc7-120739ee3151": {"node_ids": ["f9cff0a5-5874-4352-9616-e355b0850daf"], "metadata": {"python_code": "import asyncio\nimport nest_asyncio\nfrom playwright.async_api import async_playwright\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.launch(headless=False)\n        page = await browser.new_page()\n        await page.goto(\"https://www.google.com\")\n        # Best practice: Use the dynamically verified, most reliable selector for Google.\n        search_box = page.locator('textarea[name=\"q\"]')\n        await search_box.fill(\"\u72ac\")\n        await search_box.press(\"Enter\")\n        await page.wait_for_load_state('networkidle')\n        # Best practice: Keep the browser open for verification.\n        await asyncio.Future()\n\nasyncio.run(main())\n", "original_prompt": "\u30d6\u30e9\u30a6\u30b6\u3092\u958b\u3044\u3066\"\u72ac\"\u3092\u691c\u7d22"}}}, "docstore/data": {"0d110b6c-3530-4a48-857d-b358938889e0": {"__data__": {"id_": "0d110b6c-3530-4a48-857d-b358938889e0", "embedding": null, "metadata": {"python_code": "import subprocess\nimport time\nimport pygetwindow as gw\nimport pyperclip\nimport pyautogui\n\n# Best Practice: Always check for an existing window first.\nnotepad_windows = gw.getWindowsWithTitle('\u30e1\u30e2\u5e33')\n\nif notepad_windows:\n    window = notepad_windows[0]\n    window.activate()\n    time.sleep(1)\nelse:\n    subprocess.Popen(['notepad.exe'])\n    time.sleep(2)\n    window = gw.getWindowsWithTitle('\u30e1\u30e2\u5e33')[0]\n    window.activate()\n    time.sleep(1)\n\n# Best Practice: Use clipboard for non-ASCII characters.\npyperclip.copy('\u732b')\npyautogui.hotkey('ctrl', 'v')\n", "original_prompt": "\u30e1\u30e2\u5e33\u3092\u958b\u3044\u3066\"\u732b\"\u3068\u5165\u529b"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf1f0534-c868-4d8b-bca3-6ae23d8004f7", "node_type": "4", "metadata": {"python_code": "import subprocess\nimport time\nimport pygetwindow as gw\nimport pyperclip\nimport pyautogui\n\n# Best Practice: Always check for an existing window first.\nnotepad_windows = gw.getWindowsWithTitle('\u30e1\u30e2\u5e33')\n\nif notepad_windows:\n    window = notepad_windows[0]\n    window.activate()\n    time.sleep(1)\nelse:\n    subprocess.Popen(['notepad.exe'])\n    time.sleep(2)\n    window = gw.getWindowsWithTitle('\u30e1\u30e2\u5e33')[0]\n    window.activate()\n    time.sleep(1)\n\n# Best Practice: Use clipboard for non-ASCII characters.\npyperclip.copy('\u732b')\npyautogui.hotkey('ctrl', 'v')\n", "original_prompt": "\u30e1\u30e2\u5e33\u3092\u958b\u3044\u3066\"\u732b\"\u3068\u5165\u529b"}, "hash": "454ef5c4b701281af69dfe2069ca33aab3246e6eefed78f66e40e80a9f260e35", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\u30e1\u30e2\u5e33\u3092\u958b\u3044\u3066\"\u732b\"\u3068\u5165\u529b", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 13, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f9cff0a5-5874-4352-9616-e355b0850daf": {"__data__": {"id_": "f9cff0a5-5874-4352-9616-e355b0850daf", "embedding": null, "metadata": {"python_code": "import asyncio\nimport nest_asyncio\nfrom playwright.async_api import async_playwright\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.launch(headless=False)\n        page = await browser.new_page()\n        await page.goto(\"https://www.google.com\")\n        # Best practice: Use the dynamically verified, most reliable selector for Google.\n        search_box = page.locator('textarea[name=\"q\"]')\n        await search_box.fill(\"\u72ac\")\n        await search_box.press(\"Enter\")\n        await page.wait_for_load_state('networkidle')\n        # Best practice: Keep the browser open for verification.\n        await asyncio.Future()\n\nasyncio.run(main())\n", "original_prompt": "\u30d6\u30e9\u30a6\u30b6\u3092\u958b\u3044\u3066\"\u72ac\"\u3092\u691c\u7d22"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9ad117f5-cd4e-4a47-9fc7-120739ee3151", "node_type": "4", "metadata": {"python_code": "import asyncio\nimport nest_asyncio\nfrom playwright.async_api import async_playwright\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.launch(headless=False)\n        page = await browser.new_page()\n        await page.goto(\"https://www.google.com\")\n        # Best practice: Use the dynamically verified, most reliable selector for Google.\n        search_box = page.locator('textarea[name=\"q\"]')\n        await search_box.fill(\"\u72ac\")\n        await search_box.press(\"Enter\")\n        await page.wait_for_load_state('networkidle')\n        # Best practice: Keep the browser open for verification.\n        await asyncio.Future()\n\nasyncio.run(main())\n", "original_prompt": "\u30d6\u30e9\u30a6\u30b6\u3092\u958b\u3044\u3066\"\u72ac\"\u3092\u691c\u7d22"}, "hash": "400cd6ebfc44d48933e26517091b630008ba9027ebf542b6a8459782ebc3e751", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\u30d6\u30e9\u30a6\u30b6\u3092\u958b\u3044\u3066\"\u72ac\"\u3092\u691c\u7d22", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 14, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"0d110b6c-3530-4a48-857d-b358938889e0": {"doc_hash": "26156a60c489a1487f31c6a97fb0bdbab587da34838817768c1188437a66b8c5", "ref_doc_id": "bf1f0534-c868-4d8b-bca3-6ae23d8004f7"}, "bf1f0534-c868-4d8b-bca3-6ae23d8004f7": {"doc_hash": "454ef5c4b701281af69dfe2069ca33aab3246e6eefed78f66e40e80a9f260e35"}, "f9cff0a5-5874-4352-9616-e355b0850daf": {"doc_hash": "7cfb8241dd70a0e049e20070faf40f8b58fc4a1b52afb6b5a9e896b22fe97260", "ref_doc_id": "9ad117f5-cd4e-4a47-9fc7-120739ee3151"}, "9ad117f5-cd4e-4a47-9fc7-120739ee3151": {"doc_hash": "400cd6ebfc44d48933e26517091b630008ba9027ebf542b6a8459782ebc3e751"}}}